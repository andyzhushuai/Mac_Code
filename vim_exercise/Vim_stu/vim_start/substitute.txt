*Substitute*
--------------------------------------------------------------------
下面介绍替换。首先给出Vim帮助中替换的完整模式的命令: >

    :[range]s[ubstitute]/{pattern}/{string}/[flags] [count]

帮助中的说明也一并给出：
"""
对 [range] 指定的行把 {pattern} 的匹配替代成{string}。{string} 可以是按字面意
义的，也可以包含特殊字符。如果不指定 [range] 和 [count]，仅在当前行进行替代。
如果指定 [count]，在 [range] 最后一行开始的 [count] 行进行替代。如果不指定 
[range] ，则从当前行开始。
"""

帮助中的说明还是很严谨、全面和权威的，不过就是稍显抽象了一点。下面给出几个常用
的例子来说明替换的用法。

首先是使用的最频繁的一种替换，输入命令如下: >

    :%s/zhs/ZHS/gc

其中%表示整个文本范围，即帮助中的range。 可见替换也是前面所介绍过的范围+操作命
令的组合操作：指定range之后的操作命令s [substitute]。

第一个/后给出的zhs就是pattern，表示要被替换的字符串。 这个与搜索中的一样，也是
应用正则表达式的。替换不就是先搜索然后把搜索结果进行替换嘛。

第二个/后给出的ZHS就是string，表示替换成的字符串。值得注意的是，如果里面有特殊
字符的话，也需要想搜索模式中一样使用转义符，即\。

第三个/后给出的gc就是flags，表示提供给替换的选项。gc表示提供了两个选项参数，一
个是g [global] ，如果没有该选项， Vim默认每行只替换第一个匹配的字符串的(因为正
则表达式是以行为单位的)， 即是说，如果一行中有两个zhs，没有指定g选项的话，该替
换命令只会替换该行的第一个zhs为ZHS，而第二个则直接忽略； c表示确认，即每次要进
行替换前，Vim都会给出多个选项询问使用者是否对该匹配结果进行替换。

Vim提供的替换选项十分繁多，读者可以键入: >

    :help s_flags

来查看所有的替换选项。

下面给出一个特别的用法: >

    :20,100s/bc/a&d/g

该替换命令的作用范围是从20行到100行，替换掉"bc"，然后替换成"a&d"，并且是全局替
换。哈哈，有个错误。string中的&是一个特殊字符，表示被替换内容，即pattern。结果
就是bc被替换成了abcd。如果要替换成"a&d"的话，需要用\&将&转义。

下面再给个复杂的例子：

将“(1), ...., (2), ....,(100)”替换成“(2), ...., (3), ...., (101)”。 即括号里的
序号数字都加一。如果要在文本中一处处找到并修改是很累的，有100个呢。在Vim下一条
命令就可以搞定: >

    :%s/(\(\d+\))/\="(".(submatch(1)+1).")"/g

解释如下：
  %       全文（“%”是“1，$”范围的缩写）
  s       替换
  /       搜索字符串开始
  (       左括号
  \(      开始记录匹配
  \d+     一个或多个数字
  \)      结束记录匹配
  )       右括号
  /       搜索字符串结束
  \=      把后面的表达式计算出来作为替换字符串
  "("     左括号
  .       字符串连接运算符
  (submatch(1)+1)       把第一个匹配的结果加一作为一个整体返回
  .")"    添上右括号
  /g      替换字符串结束，g表示替换每一行的所有匹配结果。

很复杂吧，反正笔者自己是写不出这么复杂的命令的，哈哈，这个例子是摘自网上的。不
过这个强大倒不是Vim的强大，而是正则表达式的强大。 正则表达式真的是一个十分强大
的工具，是文本处理的杀手级应用。 就连GFW小组都举办了个什么正则表达式大赛，以期
提高，嗯，那个什么能力。Fuck GFW！(失态了...)。

自此，关于Vim中的搜索和替换介绍完了， 读者应该可以应付编辑工作中的大部分该类需
求了吧，别说不可以！
